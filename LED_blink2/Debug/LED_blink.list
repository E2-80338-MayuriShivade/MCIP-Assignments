
LED_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000288  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000430  08000430  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000430  08000430  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000430  08000430  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000430  08000430  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000430  08000430  00010430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000434  08000434  00010434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000c49  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000335  00000000  00000000  00020cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000b8  00000000  00000000  00020ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000077  00000000  00000000  000210b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00017f7c  00000000  00000000  00021127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000ebf  00000000  00000000  000390a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008b75b  00000000  00000000  00039f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000174  00000000  00000000  000c56c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  000c5834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000004 	.word	0x20000004
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000418 	.word	0x08000418

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000008 	.word	0x20000008
 80001e4:	08000418 	.word	0x08000418

080001e8 <led_init>:
 */

#include "led.h"

void led_init(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	//enable clock for gpio D port
	RCC->AHB1ENR |= BV(GPIOD_CLK_ENB);
 80001ec:	4b14      	ldr	r3, [pc, #80]	; (8000240 <led_init+0x58>)
 80001ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f0:	4a13      	ldr	r2, [pc, #76]	; (8000240 <led_init+0x58>)
 80001f2:	f043 0308 	orr.w	r3, r3, #8
 80001f6:	6313      	str	r3, [r2, #48]	; 0x30

	//SELECT MODE OF GPIO PINS AS O/P
	LED_GPIO->MODER |=   BV(24) | BV(26) | BV(28) | BV(30);
 80001f8:	4b12      	ldr	r3, [pc, #72]	; (8000244 <led_init+0x5c>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a11      	ldr	r2, [pc, #68]	; (8000244 <led_init+0x5c>)
 80001fe:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000202:	6013      	str	r3, [r2, #0]
    LED_GPIO->MODER &= ~(BV(25) | BV(27) | BV(29) | BV(31));
 8000204:	4b0f      	ldr	r3, [pc, #60]	; (8000244 <led_init+0x5c>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a0e      	ldr	r2, [pc, #56]	; (8000244 <led_init+0x5c>)
 800020a:	f023 432a 	bic.w	r3, r3, #2852126720	; 0xaa000000
 800020e:	6013      	str	r3, [r2, #0]

    //SELECT O/P TYPE AS A PUSH PULL
    LED_GPIO->OTYPER &= ~(BV(12) | BV(13) | BV(14) | BV(15));
 8000210:	4b0c      	ldr	r3, [pc, #48]	; (8000244 <led_init+0x5c>)
 8000212:	685b      	ldr	r3, [r3, #4]
 8000214:	4a0b      	ldr	r2, [pc, #44]	; (8000244 <led_init+0x5c>)
 8000216:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800021a:	6053      	str	r3, [r2, #4]

    //SELECT O/P SPEED AS LOW
    LED_GPIO->OSPEEDR &= ~(BV(24) | BV(25) | BV(26) | BV(27) |BV(28) | BV(29) | BV(30) | BV(31));
 800021c:	4b09      	ldr	r3, [pc, #36]	; (8000244 <led_init+0x5c>)
 800021e:	689b      	ldr	r3, [r3, #8]
 8000220:	4a08      	ldr	r2, [pc, #32]	; (8000244 <led_init+0x5c>)
 8000222:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000226:	6093      	str	r3, [r2, #8]

    //DO NOT SELECT PULL UP/PULL DOWN RESISTOR
    LED_GPIO->PUPDR  &= ~(BV(24) | BV(25) | BV(26) | BV(27) |BV(28) | BV(29) | BV(30) | BV(31));
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <led_init+0x5c>)
 800022a:	68db      	ldr	r3, [r3, #12]
 800022c:	4a05      	ldr	r2, [pc, #20]	; (8000244 <led_init+0x5c>)
 800022e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000232:	60d3      	str	r3, [r2, #12]

}
 8000234:	bf00      	nop
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	40023800 	.word	0x40023800
 8000244:	40020c00 	.word	0x40020c00

08000248 <led_on>:
void led_on(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
	//write 1 on respective bit
   	LED_GPIO->ODR |= BV(LED_GREEN) | BV(LED_ORANGE) | BV(LED_RED) | BV(LED_BLUE);
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <led_on+0x1c>)
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	4a04      	ldr	r2, [pc, #16]	; (8000264 <led_on+0x1c>)
 8000252:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000256:	6153      	str	r3, [r2, #20]
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40020c00 	.word	0x40020c00

08000268 <led_off>:

void led_off(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
	//write 0 on respective bits of ODR
	LED_GPIO->ODR &= ~(BV(LED_GREEN) | BV(LED_ORANGE) | BV(LED_RED) | BV(LED_BLUE));
 800026c:	4b05      	ldr	r3, [pc, #20]	; (8000284 <led_off+0x1c>)
 800026e:	695b      	ldr	r3, [r3, #20]
 8000270:	4a04      	ldr	r2, [pc, #16]	; (8000284 <led_off+0x1c>)
 8000272:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000276:	6153      	str	r3, [r2, #20]
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	40020c00 	.word	0x40020c00

08000288 <DelayMs>:

void SwDelayMs(uint32_t ms);

uint32_t DWT_Init(void);

static inline void DelayMs(volatile uint32_t ms) {
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000290:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <DelayMs+0x44>)
 8000292:	685b      	ldr	r3, [r3, #4]
 8000294:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000296:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <DelayMs+0x48>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a0e      	ldr	r2, [pc, #56]	; (80002d4 <DelayMs+0x4c>)
 800029c:	fba2 2303 	umull	r2, r3, r2, r3
 80002a0:	099b      	lsrs	r3, r3, #6
 80002a2:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	68ba      	ldr	r2, [r7, #8]
 80002a8:	fb02 f303 	mul.w	r3, r2, r3
 80002ac:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80002ae:	bf00      	nop
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <DelayMs+0x44>)
 80002b2:	685a      	ldr	r2, [r3, #4]
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	1ad2      	subs	r2, r2, r3
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d3f8      	bcc.n	80002b0 <DelayMs+0x28>
}
 80002be:	bf00      	nop
 80002c0:	bf00      	nop
 80002c2:	3714      	adds	r7, #20
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr
 80002cc:	e0001000 	.word	0xe0001000
 80002d0:	20000000 	.word	0x20000000
 80002d4:	10624dd3 	.word	0x10624dd3

080002d8 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
//#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
 led_init();
 80002dc:	f7ff ff84 	bl	80001e8 <led_init>
 while(1)
 {
	 led_on();
 80002e0:	f7ff ffb2 	bl	8000248 <led_on>
	 DelayMs(2000);
 80002e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002e8:	f7ff ffce 	bl	8000288 <DelayMs>
	 led_off();
 80002ec:	f7ff ffbc 	bl	8000268 <led_off>
	 DelayMs(2000);
 80002f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002f4:	f7ff ffc8 	bl	8000288 <DelayMs>
	 led_on();
 80002f8:	e7f2      	b.n	80002e0 <main+0x8>
	...

080002fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000300:	4b05      	ldr	r3, [pc, #20]	; (8000318 <SystemInit+0x1c>)
 8000302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000306:	4a04      	ldr	r2, [pc, #16]	; (8000318 <SystemInit+0x1c>)
 8000308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800030c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

  DWT_Init();
 8000310:	f000 f804 	bl	800031c <DWT_Init>
}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	e000ed00 	.word	0xe000ed00

0800031c <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000320:	4b14      	ldr	r3, [pc, #80]	; (8000374 <DWT_Init+0x58>)
 8000322:	68db      	ldr	r3, [r3, #12]
 8000324:	4a13      	ldr	r2, [pc, #76]	; (8000374 <DWT_Init+0x58>)
 8000326:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800032a:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800032c:	4b11      	ldr	r3, [pc, #68]	; (8000374 <DWT_Init+0x58>)
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	4a10      	ldr	r2, [pc, #64]	; (8000374 <DWT_Init+0x58>)
 8000332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000336:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <DWT_Init+0x5c>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a0e      	ldr	r2, [pc, #56]	; (8000378 <DWT_Init+0x5c>)
 800033e:	f023 0301 	bic.w	r3, r3, #1
 8000342:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000344:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <DWT_Init+0x5c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a0b      	ldr	r2, [pc, #44]	; (8000378 <DWT_Init+0x5c>)
 800034a:	f043 0301 	orr.w	r3, r3, #1
 800034e:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000350:	4b09      	ldr	r3, [pc, #36]	; (8000378 <DWT_Init+0x5c>)
 8000352:	2200      	movs	r2, #0
 8000354:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000356:	bf00      	nop
    __ASM volatile ("NOP");
 8000358:	bf00      	nop
    __ASM volatile ("NOP");
 800035a:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <DWT_Init+0x5c>)
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	2b00      	cmp	r3, #0
 8000362:	bf0c      	ite	eq
 8000364:	2301      	moveq	r3, #1
 8000366:	2300      	movne	r3, #0
 8000368:	b2db      	uxtb	r3, r3
}
 800036a:	4618      	mov	r0, r3
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr
 8000374:	e000edf0 	.word	0xe000edf0
 8000378:	e0001000 	.word	0xe0001000

0800037c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800037c:	480d      	ldr	r0, [pc, #52]	; (80003b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000380:	f7ff ffbc 	bl	80002fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000384:	480c      	ldr	r0, [pc, #48]	; (80003b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000386:	490d      	ldr	r1, [pc, #52]	; (80003bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000388:	4a0d      	ldr	r2, [pc, #52]	; (80003c0 <LoopForever+0xe>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800038c:	e002      	b.n	8000394 <LoopCopyDataInit>

0800038e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000392:	3304      	adds	r3, #4

08000394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000398:	d3f9      	bcc.n	800038e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039a:	4a0a      	ldr	r2, [pc, #40]	; (80003c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800039c:	4c0a      	ldr	r4, [pc, #40]	; (80003c8 <LoopForever+0x16>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a0:	e001      	b.n	80003a6 <LoopFillZerobss>

080003a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a4:	3204      	adds	r2, #4

080003a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a8:	d3fb      	bcc.n	80003a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003aa:	f000 f811 	bl	80003d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ae:	f7ff ff93 	bl	80002d8 <main>

080003b2 <LoopForever>:

LoopForever:
  b LoopForever
 80003b2:	e7fe      	b.n	80003b2 <LoopForever>
  ldr   r0, =_estack
 80003b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003bc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003c0:	08000438 	.word	0x08000438
  ldr r2, =_sbss
 80003c4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003c8:	20000020 	.word	0x20000020

080003cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003cc:	e7fe      	b.n	80003cc <ADC_IRQHandler>
	...

080003d0 <__libc_init_array>:
 80003d0:	b570      	push	{r4, r5, r6, lr}
 80003d2:	4d0d      	ldr	r5, [pc, #52]	; (8000408 <__libc_init_array+0x38>)
 80003d4:	4c0d      	ldr	r4, [pc, #52]	; (800040c <__libc_init_array+0x3c>)
 80003d6:	1b64      	subs	r4, r4, r5
 80003d8:	10a4      	asrs	r4, r4, #2
 80003da:	2600      	movs	r6, #0
 80003dc:	42a6      	cmp	r6, r4
 80003de:	d109      	bne.n	80003f4 <__libc_init_array+0x24>
 80003e0:	4d0b      	ldr	r5, [pc, #44]	; (8000410 <__libc_init_array+0x40>)
 80003e2:	4c0c      	ldr	r4, [pc, #48]	; (8000414 <__libc_init_array+0x44>)
 80003e4:	f000 f818 	bl	8000418 <_init>
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	10a4      	asrs	r4, r4, #2
 80003ec:	2600      	movs	r6, #0
 80003ee:	42a6      	cmp	r6, r4
 80003f0:	d105      	bne.n	80003fe <__libc_init_array+0x2e>
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f8:	4798      	blx	r3
 80003fa:	3601      	adds	r6, #1
 80003fc:	e7ee      	b.n	80003dc <__libc_init_array+0xc>
 80003fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000402:	4798      	blx	r3
 8000404:	3601      	adds	r6, #1
 8000406:	e7f2      	b.n	80003ee <__libc_init_array+0x1e>
 8000408:	08000430 	.word	0x08000430
 800040c:	08000430 	.word	0x08000430
 8000410:	08000430 	.word	0x08000430
 8000414:	08000434 	.word	0x08000434

08000418 <_init>:
 8000418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041a:	bf00      	nop
 800041c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041e:	bc08      	pop	{r3}
 8000420:	469e      	mov	lr, r3
 8000422:	4770      	bx	lr

08000424 <_fini>:
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000426:	bf00      	nop
 8000428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042a:	bc08      	pop	{r3}
 800042c:	469e      	mov	lr, r3
 800042e:	4770      	bx	lr
